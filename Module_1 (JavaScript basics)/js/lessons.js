// MODULE_1

'use strict'; // Строгий режим (новий), для недопущення старих помилок в JS

//* Змінні
let sum = 5; // Зміна яку можна перезаписувати (краще використоувати const)
const name = 'Jonh'; // Зміна константа (на пряму перезаписувати не можливо)
var old = 18; // Стара версія змінної (в нових проектах не використовується, можливо визивати до обявлення такої зміної, якщо вимкнений 'use strict')

// Назва змінних повинна бути логічною, що вона містить

// camelCase - стандартна назва змінних
// snake_case
// UPPER_SNAKE_CASE - назва змінних, які по ходу коду не будуть змінюватись взагалі
// PascalCase
// Kebab-case

//-----------------------------------------------------------------------------------------------------------------------------------------//

//* Типи даних
//Все в JS це об'єкти або поводять себе як об'єкти

//Примітивній типи:
Number(); // (Infinity, NaN) - число
String(); // 'Text' - строка
Boolean(); // false / true - логічний тип даних
Undefined(); // значення відсутнє
Null(); // значення що не існує
BigInt(); // велике числове значення (2 в 53 степені)
Symbol(); // створення унікальних індетифікаторів

//Складніші типи:
Object(); // об'єкти (колекція даних)
Array(); // масиви (колекція даних)
Function(); // функції

//-----------------------------------------------------------------------------------------------------------------------------------------//

//* Об'єкти та масиви

const obj = { //Object
	name: 'Adam', // ключ - значення
	old: 18,
	place: {
		country: 'USA',
		city: 'New York'
	},
	salary: [5000, 200]
};
console.log(obj.place); // вивід ключа
delete obj.old; // видалення ключа
obj.gender = 'male'; // додавання ключа


const arr = ['milk', 18, {products: 'apple'}]; // Array
// 0: 'milk', 1: 18, 2: {products: apple} // ключ - значення
console.log(arr[2]); // {products: apple}

// Різниця між об'єктами та масивами, те що елементи в масиву йдуть попопрядку (0, 1, 2), об'єкти ні.

//-----------------------------------------------------------------------------------------------------------------------------------------//

//*Модальні вікна для браузера
alert(); //тільки інформація
confirm(); // true або false
prompt(); // input

//-----------------------------------------------------------------------------------------------------------------------------------------//

//* Інтерполяція
const userName = 'Jonh';
console.log(`Hello, ${userName}`); // інтерполяція завдяки бектикам ``

//-----------------------------------------------------------------------------------------------------------------------------------------//

//*Оператори

//+ - * / - математичні оператори
//== - порівняння не строге
//=== - порявняння строге (тип даних)
//&& - І
//|| - АБО
// оператор ! - НЕ

const num = 5;
const num2 = 10;

num++; // інкримент посфіксий (збільшує число на 1 після одного проходу)
num2--; // декримент посфіксий (зменшує число на 1 після одного проходу)
++num; // інкримент префіксний  (збільшує число на 1 до проходу)
--num2; // декримент префіксний (зменшує число на 1 до проходу)

const procent = 52 % 3; // залишок від ділянення (5 / 2 = 2,5 - не ціле число, округлюється і залишається процент від ділення 1)
console.log(procent);
for(let i = 1; i < 11; i++) {
	if(i % 2 === 0) { // ділимо одне число на інше, якщо є залишок від ділення (1) то це не парне число, якщо залишку від ділення не залишається (0) то це парне число.
		console.log(i);
	}
}
// Якщо ділити не парні числа на парні - буде залишатись залишок (1)
// Якщо ділити парні числа на парні - буде залишатись залишок (0)

//-----------------------------------------------------------------------------------------------------------------------------------------//

//*GIT
// git init - щоб GIT слідкував за папкою в якій він ініціалізірувався
// git config --global user.name "John Doe"
// git config --global user.email johndoe@example.com
// git status - переглянути якій статус у всіх файлах
// git add -A - вибрати всі файли
// git commit -m "my comment" - закомітити всі файли (зробити точку збереження)
// git push - відправити всі (змінені) файли на репозиторій GitHub
// git clone http://github/.. - скопіювати всі файли з репозиторія на іншій компютер
// git pull - оновлює всі локальні файли до останьої версії (з репозиторія) //

//-----------------------------------------------------------------------------------------------------------------------------------------//

//* Умови

const value = 4;

if(value > 5) { // true або false
	console.log('okey');
	
} else if (value < 5) {
	console.log('not okey');	
}	
else {
	console.log('eror');
}


switch(value) { // працює так як і if else, але switch робить строге порівняння
case 10:
	console.log('ok');
	break;
case 11:
	console.log('oki');
	break;	
default:
	console.log('eror');
	break;
}

//-----------------------------------------------------------------------------------------------------------------------------------------//

//* Логічні оператори && || !

const hamburger = 5,
	cola = 2,
	fries = 1,
	nuggets = 0;

if (hamburger > 2 && cola === 2 && fries || nuggets) { // Пріоритети операторів: 1. Оператор більше(>) 2. Оператор порівняння(===) 3. Оператор &&(і)-зупиняється на першому false 4. Оператор ||(ілі)-зупиняється на першому true
	console.log('Все в наявності');
} else {
	console.log('Не вистачає на всіх');	
}
// Спочатку перевіряється чи hamburger більше 2, потім чи cola рівно 2, потім чи є hamburger і cola і fries(true) потім чи є це тріо або nuggets. Результат TRUE

//-----------------------------------------------------------------------------------------------------------------------------------------//

//* Цикли

let nums = 1;

while(nums < 10) { // Умова
	console.log(nums); // Те що повинні виконати
	nums++; // збільшуємо через кожну ітерацію зміну на 1
}


do { // Умова виконається хоча б 1 раз
	console.log(nums); // Те що повинні виконати
	nums++; // збільшуємо через кожну ітерацію зміну на 1
}
while(nums < 15); // Умова


for(let i = 1; i <= 10; i++) { // Умова
	if(i === 5) {
		break; // Якщо умова спрацьовує, то цикл завершується
		continue; // Якщо умова спрацьовує, то пропускаємо те значення і цикл працює далі
	}
	console.log(i); // Те що повинні виконати
}

//* Функції
// Якщо потрібно повернути якесь значення з функції потрібно завжди писати return. 

// Function Declaration (може визиватись до її об'явлення)
function nameFunction (a, b) {
	return (a + b);
}

const res = nameFunction(5, 5);
console.log(res);

// Function Expression (визивається тільки після її об'явлення)
const myFunction = function(a, b) {
	return (a + b);
};

const res2 = myFunction(10, 5);
console.log(res2);

// Стрілочна функція (не має свого контексту this)
const test = (a, b) => {
	return (a + b);
};

const res3 = test(15, 7);
console.log(res3);

// Одну функцію можна передавати як аргумент в іншу.
const test1 = function(a, b) {
	return a + b;
};

const test2 = function(num) {
	return num;
};

const res4 = test2(test1(5, 5));
console.log(res4);

//* Рядок та числа (методи, властивості)

const sumStr = '20.2 Hello World';

console.log(sumStr.slice(5, 16)); // вирізає елемент (старт / кінець)

console.log(sumStr.length); // кількість елементів в рядку чи масиві

console.log(sumStr.toUpperCase()); // переводить всі символи в великий регістор

console.log(sumStr.indexOf('W')); // шукає порядковий номер елементу, якщо нема (-1)

console.log(parseInt(sumStr)); // переводить строковий елемент в числовий заокруглюючи його.